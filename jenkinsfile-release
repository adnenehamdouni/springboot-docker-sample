#!/usr/bin/env groovy

// Use node dedicated to Java compilation
node('master') {

    def mailRecipients = 'adnene.hamdouni@gmail.com,adnene.hamdouni@qugenx.com'
    def app
    try {

        // Clean workspace
        stage('Clean workspace') {
            deleteDir()
        }
        // Download source code
        stage('Preparation') {
          checkout scm
        }

        // Launch Maven
        stage('Build') {
            def common = load("${pwd()}/jenkinsfile-common")
            common.mavenTask("clean ")

            // Tell Mailer that it's a success
            currentBuild.result = 'SUCCESS'
        }

        stage('Build image') {
            /* This builds the actual image; synonymous to
            * docker build on the command line */

            app = docker.build("adnenehamdouni/springboot-docker-sample")
        }

        stage('Test image') {
            /* Ideally, we would run a test framework against our image.
            * For this example, we're using a Volkswagen-type approach ;-) */

            app.inside {
                sh 'echo "Tests passed"'
            }
        }

        stage('Push image') {
            /* Finally, we'll push the image with two tags:
            * First, the incremental build number from Jenkins
            * Second, the 'latest' tag.
            * Pushing multiple tags is cheap, as all the layers are reused. */
            docker.withRegistry('https://registry.hub.docker.com', 'docker-hub-credentials') {
                app.push("${env.BUILD_NUMBER}")
                app.push("latest")
            }
        }

    } catch(e) {
        // Tell Mailer that something went wrong
        currentBuild.result = 'FAILURE'
        throw e
    } finally {
        // Send mail if task broke or is repaired
        step([$class: 'Mailer', notifyEveryUnstableBuild: true, recipients: mailRecipients, sendToIndividuals: true])
    }
}
